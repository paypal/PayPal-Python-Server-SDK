# -*- coding: utf-8 -*-

"""
paypalserversdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from paypalserversdk.api_helper import APIHelper


class BancontactPaymentObject(object):

    """Implementation of the 'Bancontact Payment Object' model.

    Information used to pay Bancontact.

    Attributes:
        name (str): The full name representation like Mr J Smith.
        country_code (str): The [two-character ISO 3166-1
            code](/api/rest/reference/country-codes/) that identifies the
            country or region. Note: The country code for Great Britain is GB
            and not UK as used in the top-level domain names for that country.
            Use the `C2` country code for China worldwide for comparable
            uncontrolled price (CUP) method, bank card, and cross-border
            transactions.
        bic (str): The business identification code (BIC). In payments
            systems, a BIC is used to identify a specific business, most
            commonly a bank.
        iban_last_chars (str): The last characters of the IBAN used to pay.
        card_last_digits (str): The last digits of the card used to fund the
            Bancontact payment.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "country_code": 'country_code',
        "bic": 'bic',
        "iban_last_chars": 'iban_last_chars',
        "card_last_digits": 'card_last_digits'
    }

    _optionals = [
        'name',
        'country_code',
        'bic',
        'iban_last_chars',
        'card_last_digits',
    ]

    def __init__(self,
                 name=APIHelper.SKIP,
                 country_code=APIHelper.SKIP,
                 bic=APIHelper.SKIP,
                 iban_last_chars=APIHelper.SKIP,
                 card_last_digits=APIHelper.SKIP):
        """Constructor for the BancontactPaymentObject class"""

        # Initialize members of the class
        if name is not APIHelper.SKIP:
            self.name = name 
        if country_code is not APIHelper.SKIP:
            self.country_code = country_code 
        if bic is not APIHelper.SKIP:
            self.bic = bic 
        if iban_last_chars is not APIHelper.SKIP:
            self.iban_last_chars = iban_last_chars 
        if card_last_digits is not APIHelper.SKIP:
            self.card_last_digits = card_last_digits 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        country_code = dictionary.get("country_code") if dictionary.get("country_code") else APIHelper.SKIP
        bic = dictionary.get("bic") if dictionary.get("bic") else APIHelper.SKIP
        iban_last_chars = dictionary.get("iban_last_chars") if dictionary.get("iban_last_chars") else APIHelper.SKIP
        card_last_digits = dictionary.get("card_last_digits") if dictionary.get("card_last_digits") else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   country_code,
                   bic,
                   iban_last_chars,
                   card_last_digits)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'country_code={(self.country_code if hasattr(self, "country_code") else None)!r}, '
                f'bic={(self.bic if hasattr(self, "bic") else None)!r}, '
                f'iban_last_chars={(self.iban_last_chars if hasattr(self, "iban_last_chars") else None)!r}, '
                f'card_last_digits={(self.card_last_digits if hasattr(self, "card_last_digits") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'country_code={(self.country_code if hasattr(self, "country_code") else None)!s}, '
                f'bic={(self.bic if hasattr(self, "bic") else None)!s}, '
                f'iban_last_chars={(self.iban_last_chars if hasattr(self, "iban_last_chars") else None)!s}, '
                f'card_last_digits={(self.card_last_digits if hasattr(self, "card_last_digits") else None)!s})')
