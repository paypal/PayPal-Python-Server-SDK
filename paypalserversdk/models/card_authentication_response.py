# -*- coding: utf-8 -*-

"""
paypalserversdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from paypalserversdk.api_helper import APIHelper
from paypalserversdk.models.three_d_secure_card_authentication_response import ThreeDSecureCardAuthenticationResponse


class CardAuthenticationResponse(object):

    """Implementation of the 'Card Authentication Response' model.

    Results of Authentication such as 3D Secure.

    Attributes:
        three_d_secure (ThreeDSecureCardAuthenticationResponse): Results of 3D
            Secure Authentication.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "three_d_secure": 'three_d_secure'
    }

    _optionals = [
        'three_d_secure',
    ]

    def __init__(self,
                 three_d_secure=APIHelper.SKIP):
        """Constructor for the CardAuthenticationResponse class"""

        # Initialize members of the class
        if three_d_secure is not APIHelper.SKIP:
            self.three_d_secure = three_d_secure 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        three_d_secure = ThreeDSecureCardAuthenticationResponse.from_dictionary(dictionary.get('three_d_secure')) if 'three_d_secure' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(three_d_secure)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'three_d_secure={(self.three_d_secure if hasattr(self, "three_d_secure") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'three_d_secure={(self.three_d_secure if hasattr(self, "three_d_secure") else None)!s})')
