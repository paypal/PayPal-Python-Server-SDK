# -*- coding: utf-8 -*-

"""
paypalserversdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from paypalserversdk.api_helper import APIHelper
from paypalserversdk.models.shipping_options_purchase_unit import ShippingOptionsPurchaseUnit


class OrderUpdateCallbackResponse(object):

    """Implementation of the 'Order Update Callback Response' model.

    Returns the updated shipping options for an order.

    Attributes:
        id (str): The ID of the order.
        purchase_units (ShippingOptionsPurchaseUnit): This would contain
            shipping option and amount data at purchase unit level.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "purchase_units": 'purchase_units'
    }

    _optionals = [
        'id',
        'purchase_units',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 purchase_units=APIHelper.SKIP):
        """Constructor for the OrderUpdateCallbackResponse class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if purchase_units is not APIHelper.SKIP:
            self.purchase_units = purchase_units 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        purchase_units = ShippingOptionsPurchaseUnit.from_dictionary(dictionary.get('purchase_units')) if 'purchase_units' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   purchase_units)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={(self.id if hasattr(self, "id") else None)!r}, '
                f'purchase_units={(self.purchase_units if hasattr(self, "purchase_units") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={(self.id if hasattr(self, "id") else None)!s}, '
                f'purchase_units={(self.purchase_units if hasattr(self, "purchase_units") else None)!s})')
