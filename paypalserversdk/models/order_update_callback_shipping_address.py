# -*- coding: utf-8 -*-

"""
paypalserversdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from paypalserversdk.api_helper import APIHelper


class OrderUpdateCallbackShippingAddress(object):

    """Implementation of the 'Order Update Callback Shipping Address' model.

    The portable international postal address. Maps to
    [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/w
    iki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls:
    the autocomplete
    attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-con
    trols-the-autocomplete-attribute).

    Attributes:
        admin_area_2 (str): A city, town, or village. Smaller than
            `admin_area_level_1`.
        admin_area_1 (str): The highest-level sub-division in a country, which
            is usually a province, state, or ISO-3166-2 subdivision. This data
            is formatted for postal delivery, for example, `CA` and not
            `California`. Value, by country, is: UK. A county. US. A state.
            Canada. A province. Japan. A prefecture. Switzerland. A *kanton*.
        postal_code (str): The postal code, which is the ZIP code or
            equivalent. Typically required for countries with a postal code or
            an equivalent. See [postal
            code](https://en.wikipedia.org/wiki/Postal_code).
        country_code (str): The [2-character ISO 3166-1
            code](/api/rest/reference/country-codes/) that identifies the
            country or region. Note: The country code for Great Britain is GB
            and not UK as used in the top-level domain names for that country.
            Use the `C2` country code for China worldwide for comparable
            uncontrolled price (CUP) method, bank card, and cross-border
            transactions.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "country_code": 'country_code',
        "admin_area_2": 'admin_area_2',
        "admin_area_1": 'admin_area_1',
        "postal_code": 'postal_code'
    }

    _optionals = [
        'admin_area_2',
        'admin_area_1',
        'postal_code',
    ]

    def __init__(self,
                 country_code=None,
                 admin_area_2=APIHelper.SKIP,
                 admin_area_1=APIHelper.SKIP,
                 postal_code=APIHelper.SKIP):
        """Constructor for the OrderUpdateCallbackShippingAddress class"""

        # Initialize members of the class
        if admin_area_2 is not APIHelper.SKIP:
            self.admin_area_2 = admin_area_2 
        if admin_area_1 is not APIHelper.SKIP:
            self.admin_area_1 = admin_area_1 
        if postal_code is not APIHelper.SKIP:
            self.postal_code = postal_code 
        self.country_code = country_code 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        country_code = dictionary.get("country_code") if dictionary.get("country_code") else None
        admin_area_2 = dictionary.get("admin_area_2") if dictionary.get("admin_area_2") else APIHelper.SKIP
        admin_area_1 = dictionary.get("admin_area_1") if dictionary.get("admin_area_1") else APIHelper.SKIP
        postal_code = dictionary.get("postal_code") if dictionary.get("postal_code") else APIHelper.SKIP
        # Return an object of this model
        return cls(country_code,
                   admin_area_2,
                   admin_area_1,
                   postal_code)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'admin_area_2={(self.admin_area_2 if hasattr(self, "admin_area_2") else None)!r}, '
                f'admin_area_1={(self.admin_area_1 if hasattr(self, "admin_area_1") else None)!r}, '
                f'postal_code={(self.postal_code if hasattr(self, "postal_code") else None)!r}, '
                f'country_code={self.country_code!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'admin_area_2={(self.admin_area_2 if hasattr(self, "admin_area_2") else None)!s}, '
                f'admin_area_1={(self.admin_area_1 if hasattr(self, "admin_area_1") else None)!s}, '
                f'postal_code={(self.postal_code if hasattr(self, "postal_code") else None)!s}, '
                f'country_code={self.country_code!s})')
