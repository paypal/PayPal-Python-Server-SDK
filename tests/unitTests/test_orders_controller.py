# -*- coding: utf-8 -*-

"""
paypalrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from paypalrestapis.exceptions.error_exception import ErrorException
from paypalrestapis.models.checkout_payment_intent import CheckoutPaymentIntent
from paypalrestapis.models.confirm_order_request import ConfirmOrderRequest
from paypalrestapis.models.order_tracker_request import OrderTrackerRequest
from paypalrestapis.models.patch import Patch
from paypalrestapis.models.patch_op import PatchOp
from paypalrestapis.models.payment_source import PaymentSource
from paypalrestapis.models.processing_instruction import ProcessingInstruction
from tests.unitTests.controller_test_base import ControllerTestBase
from paypalrestapis.models.order_request import OrderRequest


nonexistentOrderid = "id-4"
alreadyCapturedCaptureId = "123"
nonExistentTrackerId = "5UA89551P20376023-443844607820"


class OrdersControllerTests(ControllerTestBase):
    controller = None

    @classmethod
    def setUpClass(cls):
        super(OrdersControllerTests, cls).setUpClass()
        cls.controller = cls.client.orders
        cls.response_catcher = cls.controller.http_call_back

    def test_orders_create_for_400_status_code(self):
        collect = {
            "body": OrderRequest(
                intent=CheckoutPaymentIntent.CAPTURE,
                purchase_units=[],
            ),
            "pay_pal_request_id": "",
            "pay_pal_client_metadata_id": "PayPal-Client-Metadata-Id",
            "prefer": "return=representation",
        }

        try:
            self.controller.orders_create(collect)
        except ErrorException as e:
            print(e)
            assert e.name is not None
            assert e.message is not None
            assert e.debug_id is not None
            assert e.details is not None
            assert e.links is not None

        assert self.response_catcher.response.status_code == 400

    def test_patch_orders_for_404_status_code(self):
        collect = {"id": nonexistentOrderid, "body": [Patch(op=PatchOp.ADD)]}

        try:
            self.controller.orders_patch(collect)
        except ErrorException as e:
            print(e)
            assert e.name is not None
            assert e.message is not None
            assert e.debug_id is not None
            assert e.details is not None
            assert e.links is not None

        assert self.response_catcher.response.status_code == 404

    def test_get_orders_for_404_status_code(self):
        collect = {"id": nonexistentOrderid}

        try:
            self.controller.orders_get(collect)
        except ErrorException as e:
            print(e)
            assert e.name is not None
            assert e.message is not None
            assert e.debug_id is not None
            assert e.details is not None
            assert e.links is not None

        assert self.response_catcher.response.status_code == 404

    def test_confirm_orders_for_404_status_code(self):
        collect = {
            "id": nonexistentOrderid,
            "prefer": "return=representation",
            "body": ConfirmOrderRequest(
                payment_source=PaymentSource(),
                processing_instruction=ProcessingInstruction.NO_INSTRUCTION,
            ),
        }

        try:
            self.controller.orders_confirm(collect)
        except ErrorException as e:
            print(e)
            assert e.name is not None
            assert e.message is not None
            assert e.debug_id is not None
            assert e.details is not None
            assert e.links is not None

        assert self.response_catcher.response.status_code == 404

    def test_authorize_orders_for_404_status_code(self):
        collect = {"id": nonexistentOrderid, "prefer": "return=representation"}

        try:
            self.controller.orders_authorize(collect)
        except ErrorException as e:
            print(e)
            assert e.name is not None
            assert e.message is not None
            assert e.debug_id is not None
            assert e.details is not None
            assert e.links is not None

        assert self.response_catcher.response.status_code == 404

    def test_create_order_tracking_for_400_status_code(self):
        collect = {
            "id": nonexistentOrderid,
            "body": OrderTrackerRequest(
                capture_id=alreadyCapturedCaptureId, notify_payer=False
            ),
        }

        try:
            self.controller.orders_track_create(collect)
        except ErrorException as e:
            print(e)
            assert e.name is not None
            assert e.message is not None
            assert e.debug_id is not None
            assert e.details is not None
            assert e.links is not None

        assert self.response_catcher.response.status_code == 400

    def test_patch_order_tracking_for_404_status_code(self):
        collect = {
            "id": nonexistentOrderid,
            "tracker_id": nonExistentTrackerId,
        }
        try:
            self.controller.orders_trackers_patch(collect)
        except ErrorException as e:
            print(e)
            assert e.name is not None
            assert e.message is not None
            assert e.debug_id is not None
            assert e.details is not None
            assert e.links is not None
        assert self.response_catcher.response.status_code == 404
