# -*- coding: utf-8 -*-

"""
paypalserversdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""



from paypalserversdk.exceptions.error_exception import ErrorException
from paypalserversdk.models.capture_request import CaptureRequest
from paypalserversdk.models.money import Money
from tests.unitTests.controller_test_base import ControllerTestBase
from paypalserversdk.models.refund_request import RefundRequest

nonExistentAuthorizationId = "authorization_id8"
nonExistentCaptureId = "capture_id"
nonExistentRefundId = "refund_id"
alreadyAuthorizedAuthorizationId = "3BJ81821K7933911P"


class PaymentsControllerTests(ControllerTestBase):
    controller = None

    @classmethod
    def setUpClass(cls):
        super(PaymentsControllerTests, cls).setUpClass()
        cls.controller = cls.client.payments
        cls.response_catcher = cls.controller.http_call_back

    def test_get_authorizations_for_404_status_code(self):
        try:
            self.controller.authorizations_get(nonExistentAuthorizationId)
        except ErrorException as e:
            assert e.name is not None
            assert e.message is not None
            assert e.debug_id is not None
            assert e.details is not None
            assert e.links is not None
        

        assert self.response_catcher.response.status_code == 404

    def test_get_captures_for_404_status_code(self):
        try:
            self.controller.captures_get(nonExistentCaptureId)
        except ErrorException as e:
            assert e.name is not None
            assert e.message is not None
            assert e.debug_id is not None
            assert e.details is not None
            assert e.links is not None

        assert self.response_catcher.response.status_code == 404

    def test_get_refunds_for_404_status_code(self):
        try:
            self.controller.refunds_get(nonExistentRefundId)
        except ErrorException as e:
            assert e.name is not None
            assert e.message is not None
            assert e.debug_id is not None
            assert e.details is not None
            assert e.links is not None

        assert self.response_catcher.response.status_code == 404
        

    def test_capture_authorization_for_404_status_code(self):
        collect = {
            "authorization_id": nonExistentAuthorizationId,
            "prefer": "return=representation",
            "body": CaptureRequest(final_capture=False),
        }

        try:
            self.controller.authorizations_capture(collect)
        except ErrorException as e:
            assert e.name is not None
            assert e.message is not None
            assert e.debug_id is not None
            assert e.details is not None
            assert e.links is not None

        assert self.response_catcher.response.status_code == 404

    def test_reauthorize_authorization_for_404_status_code(self):
        collect = {
            "authorization_id": nonExistentAuthorizationId,
            "prefer": "return=minimal",
        }

        try:
            self.controller.authorizations_reauthorize(collect)
        except ErrorException as e:
            assert e.name is not None
            assert e.message is not None
            assert e.debug_id is not None
            assert e.details is not None
            assert e.links is not None

        assert self.response_catcher.response.status_code == 404

    def test_void_authorization_for_404_status_code(self):
        collect = {
            "authorization_id": nonExistentAuthorizationId,
            "prefer": "return=minimal",
        }

        try:
            self.controller.authorizations_void(collect)
        except ErrorException as e:
            assert e.name is not None
            assert e.message is not None
            assert e.debug_id is not None
            assert e.details is not None
            assert e.links is not None

        assert self.response_catcher.response.status_code == 404

    def test_capture_refund_for_404_status_code(self):
        collect = {
            "capture_id": nonExistentCaptureId,
            "pay_pal_request_id": "",
            "prefer": "return=minimal",
            "body": RefundRequest(
                amount=Money(currency_code="USD", value="1.44"),
                note_to_payer="Defective product",
            ),
        }

        try:
            self.controller.captures_refund(collect)
        except ErrorException as e:
            assert e.name is not None
            assert e.message is not None
            assert e.debug_id is not None
            assert e.details is not None
            assert e.links is not None

        assert self.response_catcher.response.status_code == 404
