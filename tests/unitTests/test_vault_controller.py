# -*- coding: utf-8 -*-

"""
paypalrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from paypalrestapis.exceptions import api_exception
from paypalrestapis.exceptions.error_exception import ErrorException
from paypalrestapis.models.payment_token_request import PaymentTokenRequest
from paypalrestapis.models.payment_token_request_payment_source import (
    PaymentTokenRequestPaymentSource,
)
from paypalrestapis.models.token_type import TokenType
from paypalrestapis.models.vault_token_request import VaultTokenRequest
from tests.unitTests.controller_test_base import ControllerTestBase


nonExistentSetupTokenId = "setup-1"
nonExistentPaymentTokenId = "payment-1"
nonExistentCustomerId = "customer-id"
invalidId = "'dw"


class VaultControllerTests(ControllerTestBase):
    controller = None

    @classmethod
    def setUpClass(cls):
        super(VaultControllerTests, cls).setUpClass()
        cls.controller = cls.client.vault
        cls.response_catcher = cls.controller.http_call_back

    def test_create_setup_tokens_for_400_status_code(self):
        collect = {
            "pay_pal_request_id": "",
            "body": PaymentTokenRequest(
                payment_source=PaymentTokenRequestPaymentSource()
            ),
        }

        try:
            self.controller.setup_tokens_create(collect)
        except ErrorException as e:
            print(e)
            assert e.name is not None
            assert e.message is not None
            assert e.debug_id is not None
            assert e.details is not None
            assert e.links is not None

        assert self.response_catcher.response.status_code == 400

    def test_create_payment_tokens_for_404_status_code(self):
        collect = {
            "pay_pal_request_id": "",
            "body": PaymentTokenRequest(
                payment_source=PaymentTokenRequestPaymentSource()
            ),
        }

        try:
            self.controller.payment_tokens_create(collect)
        except ErrorException as e:
            assert e.name is not None
            assert e.message is not None
            assert e.debug_id is not None
            assert e.details is not None
            assert e.links is not None

        assert self.response_catcher.response.status_code == 404

    def test_create_payment_tokens_for_400_status_code(self):
        collect = {
            "pay_pal_request_id": "12345",
            "body": PaymentTokenRequest(
                payment_source=PaymentTokenRequestPaymentSource(
                    token=VaultTokenRequest(id=invalidId, mtype=TokenType.SETUP_TOKEN)
                )
            ),
        }

        try:
            self.controller.payment_tokens_create(collect)
        except ErrorException as e:
            print(e)
            assert e.name is not None
            assert e.message is not None
            assert e.debug_id is not None
            assert e.details is not None
            assert e.links is not None

        assert self.response_catcher.response.status_code == 400

    def test_get_setup_tokens_for_404_status_code(self):
        try:
            self.controller.setup_tokens_get(nonExistentSetupTokenId)
        except ErrorException as e:
            print(e)
            assert e.name is not None
            assert e.message is not None
            assert e.debug_id is not None
            assert e.details is not None
            assert e.links is not None

        assert self.response_catcher.response.status_code == 404

    def test_get_setup_tokens_for_400_status_code(self):
        try:
            self.controller.setup_tokens_get(invalidId)
        except api_exception.APIException as e:
            assert e.reason is not None
            assert e.response is not None

        assert self.response_catcher.response.status_code == 400

    def test_get_payment_tokens_for_404_status_code(self):
        try:
            self.controller.payment_tokens_get(nonExistentPaymentTokenId)
        except ErrorException as e:
            print(e)
            assert e.name is not None
            assert e.message is not None
            assert e.debug_id is not None
            assert e.details is not None
            assert e.links is not None

        assert self.response_catcher.response.status_code == 404

    def test_get_payment_tokens_for_400_status_code(self):
        try:
            self.controller.payment_tokens_get(invalidId)
        except api_exception.APIException as e:
            assert e.reason is not None
            assert e.response is not None

        assert self.response_catcher.response.status_code == 400

    def test_get_customer_tokens_for_404_status_code(self):
        collect = {
            "customer_id": nonExistentCustomerId,
        }

        try:
            self.controller.customer_payment_tokens_get(collect)
        except api_exception.APIException as e:  
            assert e.reason is not None
            assert e.response is not None

        assert self.response_catcher.response.status_code == 404

    def test_get_customer_tokens_for_400_status_code(self):
        collect = {
            "customer_id": invalidId,
        }

        try:
            self.controller.customer_payment_tokens_get(collect)
        except ErrorException as e:
            assert e.name is not None
            assert e.message is not None
            assert e.debug_id is not None
            assert e.details is not None
            assert e.links is not None

        assert self.response_catcher.response.status_code == 400

    def test_delete_payment_tokens_for_204_status_code(self):
        try:
            self.controller.payment_tokens_delete(nonExistentPaymentTokenId)
        except ErrorException as e:
            assert e.name is not None
            assert e.message is not None
            assert e.debug_id is not None
            assert e.details is not None
            assert e.links is not None

        assert self.response_catcher.response.status_code == 204
